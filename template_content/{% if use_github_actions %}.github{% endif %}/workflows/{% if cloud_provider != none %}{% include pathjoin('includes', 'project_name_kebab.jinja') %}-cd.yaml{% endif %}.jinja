name: Release {{ project_name }}

on:
  {% if not use_workspace -%}
  workflow_call:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "**.md"
      - ".vscode/**"
      - ".idea/**"
  {% else -%}
  workflow_call:
  {%- endif %}
permissions:
  contents: read
  packages: read

jobs:
  {% if not use_workspace -%}
  validate:
    name: Validate {{ project_name }}
    uses: ./.github/workflows/{% include pathjoin('includes', 'project_name_kebab.jinja') %}-ci.yaml
  {%- endif %}
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to {% if cloud_provider == 'vercel' %}Vercel{% else %}Netlify{% endif %}
    environment: frontend-prod
    {% if not use_workspace %}
    needs:
      - validate
    {% endif %}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install algokit
        run: pipx install git+https://github.com/algorandfoundation/algokit-cli@feat/command_orchestration

      - name: Bootstrap dependencies
        run: algokit bootstrap all --project-name '{{ project_name }}'
    {% if cloud_provider == 'vercel' %}
      - name: Publish to Vercel
        env:
          VERCEL_TOKEN: ${{ '{{' }} secrets.VERCEL_TOKEN {{ '}}' }}
          VERCEL_PROJECT_ID: ${{ '{{' }} secrets.VERCEL_PROJECT_ID {{ '}}' }}
          VERCEL_ORG_ID: ${{ '{{' }} secrets.VERCEL_ORG_ID {{ '}}' }}
        run: |
          npm install --global vercel@canary
          vercel pull --yes --environment=production --token=${{ '{{' }} secrets.VERCEL_TOKEN {{ '}}' }}
          vercel build --prod
          vercel deploy --prebuilt --prod
    {% elif cloud_provider == 'netlify' %}
      - name: Publish to Netlify
        env:
          NETLIFY_SITE_ID: ${{ '{{' }} secrets.NETLIFY_SITE_ID {{ '}}' }}
          NETLIFY_AUTH_TOKEN: ${{ '{{' }} secrets.NETLIFY_AUTH_TOKEN {{ '}}' }}
        run: |
          npm install --global netlify-cli@latest
          netlify login
          netlify deploy --build --prod
    {% endif -%}
